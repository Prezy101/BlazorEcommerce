@inject IProductService ProductService
@implements IDisposable 

@if (ProductService.Products == null || ProductService.Products.Count == 0)

	{
	<h2 class="text-center"><span >@message</span></h2>
	}

else

{
<h3 class="text-center"><strong>ProductList</strong></h3>
<ul class='list-unstyled'>
	@foreach (var product in ProductService.Products)
   {
	   <li class="media my-3">
		   <div class="media-img-wrapper mr-2">
			   <a href="product/@product.Id">
				   <img class="media-img" src="@product.ImageUrl" alt="@product.Title">
			   </a>
		   </div>

		   <div class="media-body">
			   <a href="product/@product.Id">
				   <h4 class="mb-0">@product.Title</h4>
			   </a>
			   <p>@product.Description</p>
			   <h5 class="price">@GetPriceFromVariant(product)</h5>
		   </div>
	   </li>
   }
	
</ul>
	@for (var i = 1; i <= ProductService.PageCount; i++)

		{
			<a class="btn @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info")
			page-selection"
			href="/search/@ProductService.LastSearchText/@i">@i</a>
		}
}

@code {
	string message = "Products unavailable...";

	protected override void OnInitialized()
	{
		ProductService.ProductChanged += StateHasChanged;
	}

	public void Dispose()
	{
		ProductService.ProductChanged -= StateHasChanged;

	}

	private string GetPriceFromVariant(Product product)
	{
		var variant = product.Variants;

		if (variant.Count == 0)
		{
			return string.Empty;
		}
		if (variant.Count == 1)
		{
			return $"${variant[0].Price}";
		}
		else
		{
			decimal minPrice = variant.Min(v => v.Price);
			return $"Starting at ${minPrice}";
		}
		
	}

}
